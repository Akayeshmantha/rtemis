% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s.ADDT.R
\name{s.ADDT}
\alias{s.ADDT}
\title{Additive Tree with Linear Nodes [R]}
\usage{
s.ADDT(x, y = NULL, x.test = NULL, y.test = NULL, max.depth = 5,
  lambda = 0.05, minobsinnode = 2, minobsinnode.lin = 10,
  learning.rate = 1, part.minsplit = 2, part.xval = 0,
  part.max.depth = 1, part.cp = 0, weights = NULL, metric = "MSE",
  maximize = FALSE, grid.resample.rtset = rtset.grid.resample(),
  init = NULL, keep.x = FALSE, simplify = TRUE, cxrcoef = FALSE,
  n.cores = rtCores, verbose = TRUE, verbose.predict = FALSE,
  trace = 0, x.name = NULL, y.name = NULL, question = NULL,
  outdir = NULL, print.plot = TRUE, plot.fitted = NULL,
  plot.predicted = NULL, plot.theme = getOption("rt.fit.theme",
  "lightgrid"), save.mod = FALSE)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{(Optional) Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{(Optional) Numeric vector of testing set outcome}

\item{max.depth}{Integer: Max depth of additive tree}

\item{lambda}{Float: lambda parameter for \code{MASS::lm.ridge} Default = .01}

\item{minobsinnode}{Integer: Minimum N observations needed in node, before considering splitting}

\item{part.max.depth}{Integer: Max depth for each tree model within the additive tree}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ipw}, therefore set \code{weights = NULL} if using \code{ipw}.
Note: If \code{weight} are provided, \code{ipw} is not used. Leave NULL if setting \code{ipw = TRUE}. Default = NULL}

\item{init}{Initial value. Default = \code{mean(y)}}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{trace}{Integer: If higher than 0, will print more information to the console. Default = 0}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{question}{String: the question you are attempting to answer with this model, in plain language.}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{String: "zero", "dark", "box", "darkbox"}

\item{save.mod}{Logical. If TRUE, save all output as RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}
}
\description{
Train an Additive Tree for Regression
}
\details{
The Additive Tree grows a tree using a sequence of regularized linear models and tree stumps

tree structure:
tree
   '-x             the data that belong to this node
   '-y             the outcomes that belong to this node
   '-Fval          the F value at this node
   '-index         the index that was applied to the parent node to give this
   '-depth         the depth of the tree at this levels
   '-partlin       holds output of partLin(), if run
         '-lin.coef         The linear model coefficients
         '-part.c.left      The tree-derived constant for the left partition
         '-part.c.right     The tree-derived constant for the right partition
         '-lin.val          Fval of the linear model
         '-part.val         Fval of the tree
         '-cutFeat.name     The name of the feature on which the split was performed
         '-cutFeat.point    The point at which the split was made, left split < this point
                            if the cut feature was continuous
         '-cutFeat.category The factor levels that correspond to the left split,
                            if the the cut feature was categorical
         '-part.index       The split index, with "L" and "R" for left and right, respectively
         '-split.rule       The rule, based on cutFeat.name and cutFeat.point or cutFeat.category,
                            based on which the split was made.
         '-terminal         Logical: if TRUE, partlin did not split.
   '-left          holds the left split, if the node was split
   '-right         holds the right split, if the node was split
   '-terminal      TRUE if it is a terminal node
   '-type          "split", "nosplit", "max.depth", "minobsinnode"
}
\author{
Gilmer Valdes (algorithm), Efstathios D. Gennatas (R code)
}
