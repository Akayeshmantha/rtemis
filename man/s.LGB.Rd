% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s.LGB.R
\name{s.LGB}
\alias{s.LGB}
\title{Light Gradient Boosting (LightGBM) [C, R]}
\usage{
s.LGB(x, y = NULL, x.test = NULL, y.test = NULL, x.name = NULL,
  y.name = NULL, weights = NULL, ipw = TRUE, ipw.type = 2,
  upsample = FALSE, upsample.seed = NULL, objective = NULL,
  metric = NULL, maximize = NULL, boosting = "gbdt",
  n.trees = 50000, learning_rate = 0.01, num_leaves = 31,
  tree_learner = "serial", max_depth = -1, min_data_in_leaf = 4,
  min_sum_hessian_in_leaf = 0.001, feature_fraction = 1,
  feature_fraction_seed = 2, max_bin = 255, bagging_fraction = 1,
  bagging_freq = 0, bagging_seed = 3, early_stopping_round = 10,
  lambda_l1 = 0, lambda_l2 = 0, min_gain_to_split = 0,
  drop_rate = 0.1, skip_drop = 0.5, max_drop = 50,
  uniform_drop = FALSE, xgboost_dart_mode = FALSE, drop_seed = 4,
  top_rate = 0.2, other_rate = 0.1, resampler = "strat.sub",
  n.resamples = 4, cv.p = 0.75, cv.groups = 4, stratify.var = NULL,
  target.length = NULL, seed = NULL, importance = FALSE,
  plot.res = TRUE, save.res = FALSE, save.res.mod = FALSE,
  error.curve = FALSE, print.plot = TRUE, plot.fitted = NULL,
  plot.predicted = NULL, plot.theme = getOption("rt.fit.theme",
  "lightgrid"), question = NULL, rtclass = NULL, verbose = TRUE,
  LGB.verbose = 0, n.cores = 1, num_threads = detectCores(),
  parallel.type = c("psock", "fork"), outdir = NULL,
  save.mod = ifelse(!is.null(outdir), TRUE, FALSE), save.dump = FALSE,
  ...)
}
\arguments{
\item{x}{Numeric vector or matrix / data frame of features i.e. independent variables}

\item{y}{Numeric vector of outcome, i.e. dependent variable}

\item{x.test}{(Optional) Numeric vector or matrix / data frame of testing set features
Columns must correspond to columns in \code{x}}

\item{y.test}{(Optional) Numeric vector of testing set outcome}

\item{x.name}{Character: Name for feature set}

\item{y.name}{Character: Name for outcome}

\item{weights}{Numeric vector: Weights for cases. For classification, \code{weights} takes precedence
over \code{ipw}, therefore set \code{weights = NULL} if using \code{ipw}.
Note: If \code{weight} are provided, \code{ipw} is not used. Leave NULL if setting \code{ipw = TRUE}. Default = NULL}

\item{ipw}{Logical: If TRUE, apply inverse probability weighting (for Classification only).
Note: If \code{weights} are provided, \code{ipw} is not used. Default = TRUE}

\item{ipw.type}{Integer {0, 1, 2}
1: class.weights as in 0, divided by max(class.weights)
2: class.weights as in 0, divided by min(class.weights)
Default = 2}

\item{upsample}{Logical: If TRUE, upsample cases to balance outcome classes (for Classification only)
Caution: upsample will randomly sample with replacement if the length of the majority class is more than double
the length of the class you are upsampling, thereby introducing randomness}

\item{upsample.seed}{Integer: If provided, will be used to set the seed during upsampling.
Default = NULL (random seed)}

\item{objective}{String: Objective. Default = "regression" for regression, "binary_logloss" for
two-class classification, and "multi_logloss" for multi-class}

\item{print.plot}{Logical: if TRUE, produce plot using \code{mplot3}
Takes precedence over \code{plot.fitted} and \code{plot.predicted}}

\item{plot.fitted}{Logical: if TRUE, plot True (y) vs Fitted}

\item{plot.predicted}{Logical: if TRUE, plot True (y.test) vs Predicted.
Requires \code{x.test} and \code{y.test}}

\item{plot.theme}{String: "zero", "dark", "box", "darkbox"}

\item{question}{String: the question you are attempting to answer with this model, in plain language.}

\item{rtclass}{String: Class type to use. "S3", "S4", "RC", "R6"}

\item{verbose}{Logical: If TRUE, print summary to screen.}

\item{outdir}{Path to output directory.
If defined, will save Predicted vs. True plot, if available,
as well as full model output, if \code{save.mod} is TRUE}

\item{save.mod}{Logical. If TRUE, save all output as RDS file in \code{outdir}
\code{save.mod} is TRUE by default if an \code{outdir} is defined. If set to TRUE, and no \code{outdir}
is defined, outdir defaults to \code{paste0("./s.", mod.name)}}

\item{...}{Additional arguments}
}
\value{
\link{rtMod} object
}
\description{
Train a Light GBM model for Classification or Regression
}
\details{
[gS]: indicates parameter will be autotuned by grid search if multiple values are passed
***This function needs updating/testing with the latest LightGBM update
Read more about Light GBM parameter tuning on
\href{https://github.com/Microsoft/LightGBM/blob/master/docs/Parameters-tuning.md}{Microsoft's LightGBM github site}
and
\href{https://sites.google.com/view/lauraepp/home}{Laurae++'s site}

Some suggestions from Microsoft's site:

To increase accuracy:
\itemize{
  \item Use large max_bin (may be slower)
  \item Use small learning_rate with large num_iterations
  \item Use large num_leaves(may cause over-fitting)
  \item Use bigger training data
  \item Try dart
}

To minimize over-fitting:
\itemize{
  \item Use small max_bin
  \item Use small num_leaves
  \item Use min_data_in_leaf and min_sum_hessian_in_leaf
  \item Use bagging by set bagging_fraction and bagging_freq
  \item Use feature sub-sampling by set feature_fraction
  \item Use bigger training data
  \item Try lambda_l1, lambda_l2 and min_gain_to_split to regularization
  \item Try max_depth to avoid growing deep tree
}
Since LGB runs in parallel, default is to use all threads for LGB and set n.cores for
gridSearchLearn to 1
}
\seealso{
\link{elevate} for external cross-validation

Other Supervised Learning: \code{\link{s.ADABOOST}},
  \code{\link{s.ADDTREE}}, \code{\link{s.BART}},
  \code{\link{s.BAYESGLM}}, \code{\link{s.BRUTO}},
  \code{\link{s.C50}}, \code{\link{s.CART}},
  \code{\link{s.CTREE}}, \code{\link{s.DA}},
  \code{\link{s.ET}}, \code{\link{s.EVTREE}},
  \code{\link{s.GAM.default}}, \code{\link{s.GAM.formula}},
  \code{\link{s.GAMSEL}}, \code{\link{s.GAM}},
  \code{\link{s.GBM3}}, \code{\link{s.GBM}},
  \code{\link{s.GLMNET}}, \code{\link{s.GLM}},
  \code{\link{s.GLS}}, \code{\link{s.H2ODL}},
  \code{\link{s.H2OGBM}}, \code{\link{s.H2ORF}},
  \code{\link{s.IRF}}, \code{\link{s.KNN}},
  \code{\link{s.LDA}}, \code{\link{s.LM}},
  \code{\link{s.MARS}}, \code{\link{s.MLRF}},
  \code{\link{s.MXN}}, \code{\link{s.NBAYES}},
  \code{\link{s.NLA}}, \code{\link{s.NLS}},
  \code{\link{s.NW}}, \code{\link{s.POLYMARS}},
  \code{\link{s.PPR}}, \code{\link{s.PPTREE}},
  \code{\link{s.QDA}}, \code{\link{s.QRNN}},
  \code{\link{s.RANGER}}, \code{\link{s.RFSRC}},
  \code{\link{s.RF}}, \code{\link{s.SGD}},
  \code{\link{s.SPLS}}, \code{\link{s.SVM}},
  \code{\link{s.TFN}}, \code{\link{s.XGBLIN}},
  \code{\link{s.XGB}}

Other Tree-based methods: \code{\link{s.ADABOOST}},
  \code{\link{s.ADDTREE}}, \code{\link{s.BART}},
  \code{\link{s.C50}}, \code{\link{s.CART}},
  \code{\link{s.CTREE}}, \code{\link{s.ET}},
  \code{\link{s.EVTREE}}, \code{\link{s.GBM3}},
  \code{\link{s.GBM}}, \code{\link{s.H2OGBM}},
  \code{\link{s.H2ORF}}, \code{\link{s.IRF}},
  \code{\link{s.MLRF}}, \code{\link{s.PPTREE}},
  \code{\link{s.RANGER}}, \code{\link{s.RFSRC}},
  \code{\link{s.RF}}, \code{\link{s.XGB}}
}
\author{
Efstathios D. Gennatas
}
\concept{Supervised Learning}
\concept{Tree-based methods}
